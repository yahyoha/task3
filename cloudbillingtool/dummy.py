from grafanalib.core import Dashboard
from grafanalib._gen import DashboardEncoder
import json
import requests
from os import getenv

grafana_api_key = 'eyJrIjoiYlB2NDd6dDRYT1VXdHNlaVJaT09tejR2UFpua0tBN0oiLCJuIjoiR3JhZmFuYS1VcGRhdGUiLCJpZCI6MX0='
grafana_server = 'ibrahim8.grafana.net'

with open('../grafana/test.json', 'r') as file:
    dashboard_json = json.load(file)
    
def get_dashboard_json(dashboard, overwrite=True, message="Updated by grafanlib"):
    '''
    get_dashboard_json generates JSON from grafanalib Dashboard object

    :param dashboard - Dashboard() created via grafanalib
    '''

    # grafanalib generates json which need to pack to "dashboard" root element
    return json.dumps(
        {
            "dashboard": dashboard,
            "overwrite": overwrite,
            "message": message
        }, sort_keys=True, indent=2, cls=DashboardEncoder)


def upload_to_grafana(json, server, api_key, verify=True):
    '''
    upload_to_grafana tries to upload dashboard to grafana and prints response

    :param json - dashboard json generated by grafanalib
    :param server - grafana server name
    :param api_key - grafana api key with read and write privileges
    '''

    headers = {'Authorization': f"Bearer {api_key}", 'Content-Type': 'application/json'}
    r = requests.post(f"https://{server}/api/dashboards/db", data=json, headers=headers, verify=verify)
    # TODO: add error handling
    print(f"{r.status_code} - {r.content}")



my_dashboard = Dashboard(title="AWS Billing", uid='AWSBillig')
my_dashboard_json = get_dashboard_json(dashboard_json, overwrite=True)
upload_to_grafana(my_dashboard_json, grafana_server, grafana_api_key)